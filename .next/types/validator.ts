// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/admin">> = Specific
  const handler = {} as typeof import("../../app/admin/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/contact/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/contact">> = Specific
  const handler = {} as typeof import("../../app/contact/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/projects/[slug]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/[slug]">> = Specific
  const handler = {} as typeof import("../../app/projects/[slug]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/projects/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects">> = Specific
  const handler = {} as typeof import("../../app/projects/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/projects/solar-weather-stations-ksa/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/solar-weather-stations-ksa">> = Specific
  const handler = {} as typeof import("../../app/projects/solar-weather-stations-ksa/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/projects/tadawul-tower/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/projects/tadawul-tower">> = Specific
  const handler = {} as typeof import("../../app/projects/tadawul-tower/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/architectural-metalwork/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/architectural-metalwork">> = Specific
  const handler = {} as typeof import("../../app/services/architectural-metalwork/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/installation/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/installation">> = Specific
  const handler = {} as typeof import("../../app/services/installation/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/laser-cutting/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/laser-cutting">> = Specific
  const handler = {} as typeof import("../../app/services/laser-cutting/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/shearing/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/shearing">> = Specific
  const handler = {} as typeof import("../../app/services/shearing/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/sheet-bending/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/sheet-bending">> = Specific
  const handler = {} as typeof import("../../app/services/sheet-bending/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/shop-drawings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/shop-drawings">> = Specific
  const handler = {} as typeof import("../../app/services/shop-drawings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/special-projects/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/special-projects">> = Specific
  const handler = {} as typeof import("../../app/services/special-projects/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/services/structural-steel/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/services/structural-steel">> = Specific
  const handler = {} as typeof import("../../app/services/structural-steel/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/images/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/images">> = Specific
  const handler = {} as typeof import("../../app/api/images/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/projects/feature/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/feature">> = Specific
  const handler = {} as typeof import("../../app/api/projects/feature/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/projects/new/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects/new">> = Specific
  const handler = {} as typeof import("../../app/api/projects/new/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/projects/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/projects">> = Specific
  const handler = {} as typeof import("../../app/api/projects/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
